<application>
  <component name="VimEditorSettings">
    <editor>
      <key-repeat enabled="true" />
    </editor>
  </component>
  <component name="VimHistorySettings">
    <history>
      <history-search>
        <entry>,&quot;</entry>
        <entry>A</entry>
        <entry encoding="base64">IDo=</entry>
        <entry encoding="base64">IA==</entry>
        <entry>jkb_auth</entry>
        <entry>pLABEL</entry>
        <entry>pTARGET</entry>
        <entry>pEND</entry>
        <entry>auth_pre&quot;</entry>
        <entry>pre&quot;</entry>
      </history-search>
      <history-cmd>
        <entry>%s/pre&quot;/backup&quot;/g</entry>
        <entry>1064</entry>
        <entry>52</entry>
        <entry>79</entry>
        <entry>53</entry>
        <entry>42</entry>
        <entry>33</entry>
        <entry>36</entry>
        <entry>239</entry>
        <entry>324</entry>
        <entry>101</entry>
        <entry>344</entry>
        <entry>147</entry>
        <entry>11629</entry>
        <entry>wq</entry>
        <entry>L135899</entry>
        <entry>135899</entry>
        <entry>145249</entry>
        <entry>145318</entry>
        <entry>141171</entry>
      </history-cmd>
      <history-expr />
      <history-input />
    </history>
  </component>
  <component name="VimKeySettings">
    <shortcut-conflicts>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed N</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed B</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed T</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed D</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed E</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed 2</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>shift ctrl pressed 2</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed V</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed J</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed O</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed P</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed F</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed K</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed A</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed R</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed G</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed H</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed M</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>shift ctrl pressed 6</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed I</text>
      </shortcut-conflict>
    </shortcut-conflicts>
  </component>
  <component name="VimMarksSettings">
    <globalmarks />
    <filemarks>
      <file name="$USER_HOME$/Documents/work/code/ice/M3DViewer/src/Viewer/Logger.ts" timestamp="1610106218232" />
      <file name="$USER_HOME$/Documents/work/code/ice/M3DViewer/ignorefiles/README.md" timestamp="1610361387648">
        <mark key="[" line="56" column="14" />
        <mark key="]" line="56" column="14" />
        <mark key="^" line="52" column="15" />
        <mark key="." line="56" column="14" />
      </file>
      <file name="$USER_HOME$/Documents/work/code/ice/M3DViewer/src/Viewer/Group.ts" timestamp="1610364970794">
        <mark key="[" line="17" column="29" />
        <mark key="]" line="17" column="29" />
        <mark key="^" line="17" column="29" />
        <mark key="." line="17" column="28" />
      </file>
      <file name="$USER_HOME$/Documents/work/code/ice/M3DViewer/ignorefiles/BIMWINNER.BOS3D.js" timestamp="1610366059656">
        <mark key="[" line="141235" column="40" />
        <mark key="]" line="145234" column="4" />
        <mark key="^" line="139528" column="6" />
        <mark key="." line="139528" column="5" />
      </file>
      <file name="$USER_HOME$/Documents/work/code/ice/M3DViewer/src/Viewer/CameraAnimator.ts" timestamp="1610362585743">
        <mark key="[" line="5" column="1" />
      </file>
      <file name="$USER_HOME$/Documents/work/code/ice/M3DViewer/src/Viewer/ViewerImpl.ts" timestamp="1610363310370" />
      <file name="$USER_HOME$/Documents/work/code/ice/M3DViewer/node_modules/@types/node/console.d.ts" timestamp="1610105496250" />
      <file name="$USER_HOME$/Documents/work/code/ice/M3DViewer/src/Viewer/EventDispatcher.ts" timestamp="1610102206644">
        <mark key="[" line="8" column="0" />
        <mark key="]" line="84" column="0" />
        <mark key="^" line="83" column="6" />
        <mark key="." line="84" column="0" />
      </file>
      <file name="$USER_HOME$/Documents/work/code/ice/M3DViewer/src/Viewer/SVGRect.ts" timestamp="1610101988058">
        <mark key="]" line="137" column="16" />
        <mark key="." line="137" column="15" />
        <mark key="^" line="137" column="16" />
      </file>
      <file name="$USER_HOME$/Documents/work/code/ice/M3DViewer/node_modules/three/src/core/EventDispatcher.d.ts" timestamp="1610101751837" />
      <file name="$USER_HOME$/Documents/work/code/ice/M3DViewer/src/Viewer/Event.ts" timestamp="1610101780322">
        <mark key="[" line="79" column="1" />
      </file>
      <file name="$USER_HOME$/Documents/work/code/ice/M3DViewer/src/Viewer/Scene.ts" timestamp="1610365242323">
        <mark key="'" line="1380" column="38" />
        <mark key="[" line="384" column="7" />
        <mark key="]" line="10" column="31" />
        <mark key="^" line="10" column="31" />
        <mark key="." line="10" column="30" />
      </file>
      <file name="$USER_HOME$/Documents/work/code/ice/M3DViewer/src/Viewer/Constant.ts" timestamp="1610364728575">
        <mark key="[" line="142" column="0" />
        <mark key="]" line="181" column="2" />
        <mark key="^" line="181" column="2" />
        <mark key="." line="181" column="1" />
      </file>
      <file name="$USER_HOME$/Documents/work/code/ice/M3DViewer/src/Viewer/BOS3DMaterial.ts" timestamp="1610420310435">
        <mark key="[" line="5" column="28" />
        <mark key="]" line="11" column="0" />
        <mark key="^" line="12" column="26" />
        <mark key="." line="11" column="0" />
      </file>
      <file name="$USER_HOME$/Documents/work/code/ice/M3DViewer/src/Viewer/ModelManager.ts" timestamp="1610363542358">
        <mark key="[" line="19" column="31" />
        <mark key="]" line="19" column="31" />
        <mark key="^" line="19" column="31" />
        <mark key="." line="19" column="30" />
      </file>
      <file name="$USER_HOME$/Documents/work/code/ice/M3DViewer/src/Viewer/MaterialUtil.ts" timestamp="1610365920477">
        <mark key="[" line="51" column="31" />
        <mark key="]" line="51" column="31" />
        <mark key="^" line="51" column="31" />
        <mark key="." line="51" column="30" />
      </file>
      <file name="$USER_HOME$/Documents/work/code/ice/M3DViewer/src/Viewer/Viewer.ts" timestamp="1610107156119">
        <mark key="'" line="97" column="6" />
        <mark key="[" line="76" column="4" />
        <mark key="]" line="43" column="10" />
        <mark key="." line="43" column="9" />
        <mark key="^" line="43" column="10" />
      </file>
      <file name="$USER_HOME$/Documents/work/code/ice/M3DViewer/src/Viewer/ViewController.ts" timestamp="1610098507311">
        <mark key="[" line="1" column="25" />
      </file>
      <file name="$USER_HOME$/Documents/work/code/ice/M3DViewer/src/Viewer/Camera.ts" timestamp="1610361734371">
        <mark key="[" line="0" column="1" />
      </file>
    </filemarks>
    <jumps>
      <jump line="6" column="0" filename="$APPLICATION_CONFIG_DIR$/consoles/db/e4cc4159-d979-4ca4-b688-634fce7bac53/console_1.sql" />
      <jump line="12" column="15" filename="$APPLICATION_CONFIG_DIR$/consoles/db/ea922166-ecef-4afc-aef8-b91670afaf3d/console.sql" />
      <jump line="18" column="0" filename="$USER_HOME$/Documents/work/code/bom/bom-fe/src/views/analysis/EventAnalysisV2/Event4.vue" />
      <jump line="1" column="8" filename="$APPLICATION_CONFIG_DIR$/consoles/db/fb08bfed-d95e-49cd-ae58-dea936442732/console.sql" />
      <jump line="29" column="44" filename="$USER_HOME$/Documents/work/code/hlj_data_process/hlj_data_process/src/main/java/com/tencent/wll/prominentcitizens/es/PassRecordRepository.java" />
      <jump line="12" column="12" filename="$USER_HOME$/Documents/work/code/jingxinju/jiankangbao-cloud/yingji-auth/auth.log" />
      <jump line="0" column="0" filename="$USER_HOME$/Documents/work/code/jingxinju/jiankangbao-cloud/yingji-auth/auth.log" />
      <jump line="1" column="0" filename="$USER_HOME$/Documents/work/code/jingxinju/jiankangbao-cloud/yingji-auth/auth.log" />
      <jump line="15" column="0" filename="$APPLICATION_CONFIG_DIR$/scratches/jkb_shixiang_prod.json" />
      <jump line="30" column="13" filename="$APPLICATION_CONFIG_DIR$/scratches/jkb_shixiang_prod.json" />
      <jump line="29" column="0" filename="$APPLICATION_CONFIG_DIR$/scratches/jkb_shixiang_prod.json" />
      <jump line="14" column="0" filename="$APPLICATION_CONFIG_DIR$/scratches/jkb_shixiang_prod.json" />
      <jump line="12" column="5" filename="$APPLICATION_CONFIG_DIR$/scratches/1.json" />
      <jump line="1" column="0" filename="$APPLICATION_CONFIG_DIR$/scratches/1.json" />
      <jump line="0" column="0" filename="$APPLICATION_CONFIG_DIR$/scratches/1.json" />
      <jump line="13" column="19" filename="$APPLICATION_CONFIG_DIR$/scratches/1.json" />
      <jump line="4" column="0" filename="$APPLICATION_CONFIG_DIR$/scratches/1.json" />
      <jump line="13" column="140" filename="$APPLICATION_CONFIG_DIR$/scratches/jkb_poi_prod.json" />
      <jump line="14" column="0" filename="$APPLICATION_CONFIG_DIR$/scratches/jkb_poi_prod.json" />
      <jump line="19" column="21" filename="$APPLICATION_CONFIG_DIR$/scratches/jkb_poi_prod.json" />
      <jump line="13" column="123" filename="$APPLICATION_CONFIG_DIR$/scratches/jkb_push_prod.json" />
      <jump line="18" column="22" filename="$APPLICATION_CONFIG_DIR$/scratches/jkb_push_prod.json" />
      <jump line="13" column="22" filename="$APPLICATION_CONFIG_DIR$/scratches/hosts.log" />
      <jump line="2" column="0" filename="$APPLICATION_CONFIG_DIR$/scratches/hosts.log" />
      <jump line="4" column="0" filename="$APPLICATION_CONFIG_DIR$/scratches/hosts.log" />
      <jump line="0" column="333" filename="$APPLICATION_CONFIG_DIR$/scratches/hosts.log" />
      <jump line="10" column="0" filename="$APPLICATION_CONFIG_DIR$/scratches/pre_new/jkb_auth_pre.json" />
      <jump line="9" column="0" filename="$APPLICATION_CONFIG_DIR$/scratches/pre_new/jkb_auth_pre.json" />
      <jump line="11" column="0" filename="$APPLICATION_CONFIG_DIR$/scratches/pre_new/jkb_auth_pre.json" />
      <jump line="18" column="0" filename="$APPLICATION_CONFIG_DIR$/scratches/pre_new/jkb_auth_pre.json" />
      <jump line="16" column="0" filename="$APPLICATION_CONFIG_DIR$/scratches/pre_new/jkb_auth_pre.json" />
      <jump line="14" column="0" filename="$APPLICATION_CONFIG_DIR$/scratches/pre_new/jkb_shixiang_pre.json" />
      <jump line="14" column="0" filename="$APPLICATION_CONFIG_DIR$/scratches/pre_new/jkb_poi_pre.json" />
      <jump line="14" column="0" filename="$APPLICATION_CONFIG_DIR$/scratches/pre_new/jkb_push_pre.json" />
      <jump line="6" column="29" filename="$APPLICATION_CONFIG_DIR$/scratches/pre_new/jkb_push_pre.json" />
      <jump line="23" column="0" filename="$APPLICATION_CONFIG_DIR$/scratches/pre_new/jkb_shixiang_pre.json" />
      <jump line="13" column="0" filename="$APPLICATION_CONFIG_DIR$/scratches/prod_new/jkb_auth_prod.json" />
      <jump line="12" column="0" filename="$APPLICATION_CONFIG_DIR$/scratches/prod_new/jkb_auth_prod.json" />
      <jump line="121" column="2" filename="$APPLICATION_CONFIG_DIR$/scratches/prod_new/jkb_auth_prod.json" />
      <jump line="146" column="0" filename="$APPLICATION_CONFIG_DIR$/scratches/prod_new/jkb_auth_prod.json" />
      <jump line="145" column="2" filename="$APPLICATION_CONFIG_DIR$/scratches/prod_new/jkb_auth_prod.json" />
      <jump line="269" column="4" filename="$APPLICATION_CONFIG_DIR$/scratches/prod_new/jkb_auth_prod.json" />
      <jump line="134" column="44" filename="$APPLICATION_CONFIG_DIR$/scratches/prod_new/jkb_auth_prod.json" />
      <jump line="8" column="0" filename="$APPLICATION_CONFIG_DIR$/scratches/prod_new/jkb_poi_prod.json" />
      <jump line="7" column="2" filename="$APPLICATION_CONFIG_DIR$/scratches/prod_new/jkb_poi_prod.json" />
      <jump line="44" column="0" filename="$APPLICATION_CONFIG_DIR$/scratches/prod_new/jkb_shixiang_prod.json" />
      <jump line="43" column="2" filename="$APPLICATION_CONFIG_DIR$/scratches/prod_new/jkb_shixiang_prod.json" />
      <jump line="23" column="26" filename="$APPLICATION_CONFIG_DIR$/scratches/prod_new/jkb_shixiang_prod.json" />
      <jump line="22" column="0" filename="$APPLICATION_CONFIG_DIR$/scratches/prod_new/jkb_push_prod.json" />
      <jump line="21" column="2" filename="$APPLICATION_CONFIG_DIR$/scratches/prod_new/jkb_push_prod.json" />
      <jump line="67" column="25" filename="$APPLICATION_CONFIG_DIR$/scratches/prod_new/jkb_push_prod.json" />
      <jump line="70" column="6" filename="$APPLICATION_CONFIG_DIR$/scratches/prod_new/jkb_push_prod.json" />
      <jump line="71" column="6" filename="$APPLICATION_CONFIG_DIR$/scratches/prod_new/jkb_push_prod.json" />
      <jump line="17" column="0" filename="$APPLICATION_CONFIG_DIR$/scratches/prometheus_config_backup_覆盖/jkb_auth_backup.json" />
      <jump line="16" column="2" filename="$APPLICATION_CONFIG_DIR$/scratches/prometheus_config_backup_覆盖/jkb_auth_backup.json" />
      <jump line="172" column="0" filename="$APPLICATION_CONFIG_DIR$/scratches/prometheus_config_backup_覆盖/jkb_auth_backup.json" />
      <jump line="171" column="2" filename="$APPLICATION_CONFIG_DIR$/scratches/prometheus_config_backup_覆盖/jkb_auth_backup.json" />
      <jump line="330" column="3" filename="$APPLICATION_CONFIG_DIR$/scratches/prometheus_config_backup_覆盖/jkb_auth_backup.json" />
      <jump line="19" column="0" filename="$APPLICATION_CONFIG_DIR$/scratches/prometheus_config_backup_覆盖/jkb_shixiang_bakcup.json" />
      <jump line="18" column="2" filename="$APPLICATION_CONFIG_DIR$/scratches/prometheus_config_backup_覆盖/jkb_shixiang_bakcup.json" />
      <jump line="16" column="25" filename="$APPLICATION_CONFIG_DIR$/scratches/prometheus_config_backup_覆盖/jkb_shixiang_bakcup.json" />
      <jump line="8" column="0" filename="$APPLICATION_CONFIG_DIR$/scratches/prometheus_config_backup_覆盖/jkb_poi_backup.json" />
      <jump line="7" column="2" filename="$APPLICATION_CONFIG_DIR$/scratches/prometheus_config_backup_覆盖/jkb_poi_backup.json" />
      <jump line="7" column="0" filename="$APPLICATION_CONFIG_DIR$/scratches/prometheus_config_backup_覆盖/jkb_push_backup.json" />
      <jump line="6" column="2" filename="$APPLICATION_CONFIG_DIR$/scratches/prometheus_config_backup_覆盖/jkb_push_backup.json" />
      <jump line="14" column="14" filename="$USER_HOME$/Documents/work/code/jingxinju/jiankangbao-cloud/alert_boy2.py" />
      <jump line="379" column="0" filename="$USER_HOME$/Documents/work/code/golang_projects/src/git.code.oa.com/cloud_industry_yunnan/fe-yunnan/cloud_industry_portals_web/src/nginx.yaml" />
      <jump line="375" column="3" filename="$USER_HOME$/Documents/work/code/golang_projects/src/git.code.oa.com/cloud_industry_yunnan/fe-yunnan/cloud_industry_portals_web/src/nginx.yaml" />
      <jump line="0" column="3" filename="$USER_HOME$/Documents/work/code/golang_projects/src/git.code.oa.com/cloud_industry_yunnan/fe-yunnan/cloud_industry_portals_web/src/nginx.yaml" />
      <jump line="6" column="0" filename="$USER_HOME$/Documents/work/code/golang_projects/src/git.code.oa.com/cloud_industry_yunnan/fe-yunnan/cloud_industry_portals_web/src/nginx.yaml" />
      <jump line="87" column="6" filename="$USER_HOME$/Documents/work/code/ice/M3DViewer/src/Viewer/Viewer.ts" />
      <jump line="156" column="9" filename="$USER_HOME$/Documents/work/code/ice/M3DViewer/src/Viewer/ViewerImpl.ts" />
      <jump line="1369" column="38" filename="$USER_HOME$/Documents/work/code/ice/M3DViewer/src/Viewer/Scene.ts" />
      <jump line="2" column="33" filename="$USER_HOME$/Documents/work/code/ice/M3DViewer/src/Viewer/MaterialUtil.ts" />
    </jumps>
  </component>
  <component name="VimRegisterSettings">
    <registers>
      <register name="a" type="4">
        <keys>
          <key char="65" code="0" mods="0" />
          <key char="34" code="0" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="58" code="0" mods="0" />
          <key char="56" code="0" mods="0" />
          <key char="48" code="0" mods="0" />
          <key char="56" code="0" mods="0" />
          <key char="48" code="0" mods="0" />
          <key char="34" code="0" mods="0" />
          <key char="44" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="106" code="0" mods="0" />
        </keys>
      </register>
      <register name="&quot;" type="2">
        <text encoding="base64">ICAgIHByaXZhdGUgdHlwZTogc3RyaW5nOwo=</text>
      </register>
      <register name="-" type="4">
        <text>props</text>
      </register>
      <register name="/" type="4">
        <text>pre&quot;</text>
      </register>
      <register name="0" type="4">
        <text encoding="base64"></text>
      </register>
      <register name="1" type="2">
        <text encoding="base64">ICAgIHByaXZhdGUgdHlwZTogc3RyaW5nOwo=</text>
      </register>
      <register name="q" type="4">
        <keys>
          <key char="97" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
        </keys>
      </register>
      <register name="2" type="2">
        <text encoding="base64">ICAgICAgICAK</text>
      </register>
      <register name="3" type="2">
        <text encoding="base64">Cg==</text>
      </register>
      <register name="4" type="2">
        <text encoding="base64">ewo=</text>
      </register>
      <register name="5" type="2">
        <text encoding="base64">ICAgIC8vIC0tLS0tLSDms6jlhozoh6rlrprkuYnlm57osIPlh73mlbAgRSAtLS0tLS0tLS0tLS0tLSAvLwo=</text>
      </register>
      <register name="6" type="2">
        <text encoding="base64">ICAgIGNvbnN0cnVjdG9yOiBWaWV3ZXJJbXBsLAo=</text>
      </register>
      <register name="7" type="2">
        <text encoding="base64">ICAgIAo=</text>
      </register>
      <register name="8" type="2">
        <text encoding="base64">fQo=</text>
      </register>
      <register name="9" type="2">
        <text encoding="base64">ICAgIDE0NTIzNC1MMTQ1MjM0Cg==</text>
      </register>
      <register name=":" type="4">
        <text>141171</text>
      </register>
    </registers>
  </component>
  <component name="VimSearchSettings">
    <search>
      <last-search>pre&quot;</last-search>
      <last-pattern>pre&quot;</last-pattern>
      <last-replace>backup&quot;</last-replace>
      <last-substitute>pre&quot;</last-substitute>
      <last-dir>0</last-dir>
      <show-last>false</show-last>
    </search>
  </component>
  <component name="VimSettings">
    <state version="6" enabled="true" />
    <notifications>
      <idea-join enabled="true" />
      <idea-put enabled="false" />
    </notifications>
  </component>
</application>